package de.eightbitboy.hijacr.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.eightbitboy.hijacr.data.dao.Comic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC".
*/
public class ComicDao extends AbstractDao<Comic, Long> {

    public static final String TABLENAME = "COMIC";

    /**
     * Properties of entity Comic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Key = new Property(2, String.class, "key", false, "KEY");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property FirstUrl = new Property(4, String.class, "firstUrl", false, "FIRST_URL");
        public final static Property LastViewedUrl = new Property(5, String.class, "lastViewedUrl", false, "LAST_VIEWED_URL");
        public final static Property ImageQuery = new Property(6, String.class, "imageQuery", false, "IMAGE_QUERY");
        public final static Property PreviousQuery = new Property(7, String.class, "previousQuery", false, "PREVIOUS_QUERY");
        public final static Property NextQuery = new Property(8, String.class, "nextQuery", false, "NEXT_QUERY");
    };


    public ComicDao(DaoConfig config) {
        super(config);
    }
    
    public ComicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"KEY\" TEXT," + // 2: key
                "\"URL\" TEXT," + // 3: url
                "\"FIRST_URL\" TEXT," + // 4: firstUrl
                "\"LAST_VIEWED_URL\" TEXT," + // 5: lastViewedUrl
                "\"IMAGE_QUERY\" TEXT," + // 6: imageQuery
                "\"PREVIOUS_QUERY\" TEXT," + // 7: previousQuery
                "\"NEXT_QUERY\" TEXT);"); // 8: nextQuery
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(3, key);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String firstUrl = entity.getFirstUrl();
        if (firstUrl != null) {
            stmt.bindString(5, firstUrl);
        }
 
        String lastViewedUrl = entity.getLastViewedUrl();
        if (lastViewedUrl != null) {
            stmt.bindString(6, lastViewedUrl);
        }
 
        String imageQuery = entity.getImageQuery();
        if (imageQuery != null) {
            stmt.bindString(7, imageQuery);
        }
 
        String previousQuery = entity.getPreviousQuery();
        if (previousQuery != null) {
            stmt.bindString(8, previousQuery);
        }
 
        String nextQuery = entity.getNextQuery();
        if (nextQuery != null) {
            stmt.bindString(9, nextQuery);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Comic readEntity(Cursor cursor, int offset) {
        Comic entity = new Comic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // key
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastViewedUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageQuery
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // previousQuery
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // nextQuery
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastViewedUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageQuery(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPreviousQuery(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNextQuery(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Comic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Comic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
